//first method
class Solution {
public:
    int rob(vector<int>& nums) {
        int m=nums.size();
        if(m==0) return 0;
        if(m==1) return nums[0];
        if(m==2) return max(nums[0],nums[1]);
        vector<int> dp(m,0);
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        for(int i=2;i<=m-1;i++){
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp[m-1];
    }
};

//second method
class Solution {
public:
    int rob(vector<int>& nums) {
        int rob = 0; //max monney can get if rob current house
        int notrob = 0; //max money can get if not rob current house
        for(int i=0; i<nums.size(); i++) {
        int currob = notrob + nums[i]; //if rob current value, previous house must not be robbed
        notrob = max(notrob, rob); //if not rob ith house, take the max value of robbed (i-1)th house and not rob (i-1)th house
        rob = currob;
        }
        return max(rob, notrob);
    }
};
