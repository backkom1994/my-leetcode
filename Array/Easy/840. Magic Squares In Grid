class Solution {
public:
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int cnt = 0;
        if(grid.size()<3||grid[0].size()<3) return cnt;
        for(int i = 0; i < grid.size()-2; i++){
            for(int j = 0; j < grid[i].size()-2; j++){
                if(isMagicSquare(i, j, grid))
                    cnt++;
            }
        }
        return cnt;
    }
    int isMagicSquare(int i, int j, vector<vector<int>> & grid){
        int sum = grid[i][j] + grid[i][j+1] + grid[i][j+2];
        int temp=0;
        
        for(int k1 = 1; k1 < 3; k1++){
            for(int k2 = 0; k2 < 3; k2++)
                temp+=grid[i+k1][j+k2];
            if(temp!=sum) return false;
            temp=0;
        }
        
        for(int k1 = 0; k1 < 3; k1++){
            for(int k2 = 0; k2 < 3; k2++)
                temp+=grid[i+k2][j+k1];
            if(temp!=sum) return false;
            temp=0;
        }
        
        for(int k3 = 0; k3 < 3; k3++)
            temp += grid[i+k3][j+k3];
        if(temp!=sum) return false;
        temp=0;
        
        for(int k3 = 0; k3 < 3; k3++)
            temp += grid[i+k3][j+2-k3];
        if(temp!=sum) return false;
        temp=0;
        
        return true;
    }
};
