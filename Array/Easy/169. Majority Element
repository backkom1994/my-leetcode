// first method:sorting and take the value of nums[nums.size()/2]
class Solution {
public:
    int majorityElement(vector<int>& nums) {
         sort(nums.begin(), nums.end());  
         return nums[nums.size()/2];
    }
};

// second method:construct a dictionatry or hash table to estimate the occurency frequency of each element
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> freq;
        int i;
        int m=nums.size();
        for(i=0;i<m;i++)
            if(++freq[nums[i]]>m/2) return nums[i];
    }
};

// third method:Moore Voting Algorithm
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int major, counts = 0, n = nums.size();
        for (int i = 0; i < n; i++) {
            if (!counts) {
                major = nums[i];
                counts = 1;
            }
            else counts += (nums[i] == major) ? 1 : -1;
        }
        return major;
    }
};
