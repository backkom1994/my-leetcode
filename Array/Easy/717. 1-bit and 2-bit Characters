class Solution {
public:
    bool isOneBitCharacter(vector<int>& bits) {
        int i=0;
        int m=bits.size();
        while(i<m-1){
            if(bits[i]==1)i+=2;
            else i++;
        }
        if(i==m)return false;
        else return true;
    }
};

/*
We don't need to traverse the whole array, just check the last part of it.

if there is only one symbol in array the answer is always true (as last element is 0)
if there are two 0s at the end again the answer is true no matter what the rest symbols are( ...1100, ...1000,)
if there is 1 right before the last element(...10), the outcome depends on the count of sequential 1, i.e.
a) if there is odd amount of 1(10, ...01110, etc) the answer is false as there is a single 1 without pair
b) if it's even (110, ...011110, etc) the answer is true, as 0 at the end doesn't have anything to pair with

class Solution {
public:
    bool isOneBitCharacter(vector<int>& bits) {
        int ones = 0;
        //Starting from one but last, as last one is always 0.
        for (int i = bits.size() - 2; i >= 0 && bits[i] != 0 ; i--) { 
            ones++;
        }
        if (ones % 2 > 0) return false; 
        return true;
    }
};
*/
